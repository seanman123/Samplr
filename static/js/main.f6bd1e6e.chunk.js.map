{"version":3,"sources":["Assets/button.png","Assets/buttonred.png","Assets/snare.wav","Assets/kick.wav","Assets/hi-hat.wav","Assets/openhihat.wav","Assets/clap.wav","Assets/crash.wav","Assets/metal.wav","Assets/tom.wav","Assets/tom2.wav","Assets/cowbell.wav","Assets/stab.wav","Assets/science.wav","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumPad","state","firstImage","pressable","handleKeyDown","event","keyCode","props","letter","charCodeAt","audio","play","currentTime","setState","redButton","setTimeout","this","bind","handleClick","document","addEventListener","window","focus","removeEventListener","className","id","onClick","src","ref","Component","sounds","snare","kick","hihat","openhihat","clap","crash","metal","tom1","tom2","cowbell","stab","science","App","map","d","displayed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6bd1e6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/button.fa75ccd9.png\";","module.exports = __webpack_public_path__ + \"static/media/buttonred.28657611.png\";","module.exports = __webpack_public_path__ + \"static/media/snare.bc394356.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.987fa9f0.wav\";","module.exports = __webpack_public_path__ + \"static/media/hi-hat.3b1ce587.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhihat.1dcc600a.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.39f9581a.wav\";","module.exports = __webpack_public_path__ + \"static/media/crash.ff583b80.wav\";","module.exports = __webpack_public_path__ + \"static/media/metal.ef71b819.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.446e78dd.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom2.390ac7fc.wav\";","module.exports = __webpack_public_path__ + \"static/media/cowbell.470b5edb.wav\";","module.exports = __webpack_public_path__ + \"static/media/stab.d97c0f96.wav\";","module.exports = __webpack_public_path__ + \"static/media/science.6d6d2093.wav\";","import React, { Component } from 'react'; \nimport pressable from './Assets/button.png'; \nimport redButton from './Assets/buttonred.png'; \nimport './App.css';\n\n\n\nclass DrumPad extends Component {\n\n    state = {\n        firstImage: pressable\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown); \n        window.focus(); \n\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown); \n    }\n\n    handleKeyDown = event => {\n        if(event.keyCode === this.props.letter.charCodeAt()) {\n            this.audio.play();\n            this.audio.currentTime = 0; \n\n        if(this.state.firstImage === pressable ) {\n            this.setState({firstImage: redButton})\n            setTimeout(function(){\n                this.setState({firstImage: pressable});\n           }.bind(this),100);\n        }\n\n        }\n    }\n    \n    \n    handleClick = () => {\n        this.audio.play(); \n        this.audio.currentTime = 0; \n\n        if(this.state.firstImage === pressable ) {\n            this.setState({firstImage: redButton})\n            setTimeout(function(){\n                this.setState({firstImage: pressable});\n           }.bind(this),100);\n        }\n    }\n\n    \n    \n    render() {\n        return(\n            <div className=\"drum-pad\" id={this.props.id} onClick={this.handleClick}>\n                <img src={this.state.firstImage}/> \n                <p>{this.props.id} ({this.props.letter})</p>\n                <audio ref ={ref => this.audio = ref} className=\"clip\" src={this.props.src} id={this.props.letter}></audio>\n            </div>\n        )\n    }\n}\n\nexport default DrumPad; ","import React, { Component } from 'react';\nimport snare from './Assets/snare.wav'; \nimport kick from './Assets/kick.wav'; \nimport hihat from './Assets/hi-hat.wav'; \nimport openhihat from './Assets/openhihat.wav'; \nimport clap from './Assets/clap.wav'; \nimport crash from './Assets/crash.wav'; \nimport metal from './Assets/metal.wav'; \nimport tom1 from './Assets/tom.wav'; \nimport tom2 from './Assets/tom2.wav'; \nimport cowbell from './Assets/cowbell.wav'; \nimport stab from './Assets/stab.wav'; \nimport science from './Assets/science.wav'; \n\nimport './App.css';\nimport DrumPad from './DrumPad'; \n\nconst sounds = [\n  {id: 'snare', letter: 'A', src: snare},\n  {id: 'kick', letter: 'F', src: kick},\n  {id: 'hi-hat', letter: 'J', src: hihat},\n  {id: 'open-hi-hat', letter: 'K', src: openhihat},\n  {id: 'clap', letter: 'S', src: clap},\n  {id: 'crash', letter: 'L', src: crash},\n  {id: 'metal', letter: 'H', src: metal},\n  {id: 'tom', letter: 'U', src: tom1},\n  {id: 'tom2', letter: 'I', src: tom2},\n  {id: 'cowbell', letter: 'O', src: cowbell},\n  {id: 'effect1', letter: 'G', src: stab},\n  {id: 'effect2', letter: 'V', src: science},\n]\n\nclass App extends Component {\n\n\n\n      render() {\n      return (\n        <div className=\"bg\">\n          <h1>Samplr</h1>\n          <div className=\"App\">\n            {sounds.map(d => (\n              <DrumPad id={d.id} letter={d.letter} displayed={d.displayed} src={d.src}/>\n            ))}\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}